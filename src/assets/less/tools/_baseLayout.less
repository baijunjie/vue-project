/////////////////////////////////// 基础布局工具 ///////////////////////////////////

// 块元素水平居中
.blhc(@width: auto, @margin: auto) {
	display: block;
	.set(width, @width);
	margin-left: auto;
	margin-right: auto;
	.set(margin-top, @margin);
	.set(margin-bottom, @margin);
}
.blhc(@width, @margin_top, @margin_bottom) {
	display: block;
	.set(width, @width);
	margin-left: auto;
	margin-right: auto;
	.set(margin-top, @margin_top);
	.set(margin-bottom, @margin_bottom);
}



// 设置位置
.pos(@arg: auto, @position: absolute) {
	& when (@position = rel) {
		position: relative;
	}
	& when (@position = abs) {
		position: absolute;
	}
	& when (@position = fix) {
		position: fixed;
	}
	& when not(@position = rel) and not(@position = abs) and not(@position = fix) {
		position: @position;
	}

	.getPos(@arg) when (length(@arg) = 1) {
		@top: extract(@arg, 1);
		@right: extract(@arg, 1);
		@bottom: extract(@arg, 1);
		@left: extract(@arg, 1);
	}
	.getPos(@arg) when (length(@arg) = 2) {
		@top: extract(@arg, 1);
		@right: extract(@arg, 2);
		@bottom: extract(@arg, 1);
		@left: extract(@arg, 2);
	}
	.getPos(@arg) when (length(@arg) = 3) {
		@top: extract(@arg, 1);
		@right: extract(@arg, 2);
		@bottom: extract(@arg, 3);
		@left: extract(@arg, 2);
	}
	.getPos(@arg) when (length(@arg) = 4) {
		@top: extract(@arg, 1);
		@right: extract(@arg, 2);
		@bottom: extract(@arg, 3);
		@left: extract(@arg, 4);
	}
	.getPos(@arg);

	.set(top, @top);
	.set(right, @right);
	.set(bottom, @bottom);
	.set(left, @left);

	// 在 expression 表达式中，如果遇到 parseInt("auto")，那么表达式会自动失效
	& when (@compat_ie6 = true) and not(@left = auto) and not(@right = auto) {
		_width: e(%(
		'expression((this.offsetParent||this.parentNode).clientWidth-parseInt(this.currentStyle.paddingLeft||0)-parseInt(this.currentStyle.paddingRight||0)-(isNaN(parseInt(this.currentStyle.borderLeftWidth))?0:parseInt(this.currentStyle.borderLeftWidth))-(isNaN(parseInt(this.currentStyle.borderRightWidth))?0:parseInt(this.currentStyle.borderRightWidth))-parseInt("%d")-parseInt("%d"))',
		@left, @right));
	}

	& when (@compat_ie6 = true) and not(@top = auto) and not(@bottom = auto) {
		_height: e(%(
		'expression((this.offsetParent||this.parentNode).clientHeight-parseInt(this.currentStyle.paddingTop||0)-parseInt(this.currentStyle.paddingBottom||0)-(isNaN(parseInt(this.currentStyle.borderTopWidth))?0:parseInt(this.currentStyle.borderTopWidth))-(isNaN(parseInt(this.currentStyle.borderBottomWidth))?0:parseInt(this.currentStyle.borderBottomWidth))-parseInt("%d")-parseInt("%d"))',
		@top, @bottom));
	}
}



// 剩余空间自适应（父容器需要设置成定位元素。但是IE6不支持这种方法，需要另外做hack）
.fit(@arg: 0, @position: absolute) {
	.sz(auto);
	.pos(@arg, @position);
}



// 绝对中央居中（如果容器宽度小于该元素，仍然能保持居中）
// 只对块元素或者行内块元素有效，且父容器必须设置为定位元素
.hc(@outer_width, @location: top, @value: auto, @position: absolute) when (isnumber(@outer_width)) {
	.pos(auto auto auto 50%, @position);
	.set(@location, @value);
	margin-left: @outer_width / 2 * -1;
}
.hc(@location: top, @value: auto, @position: absolute) when (iskeyword(@location)) {
	.pos(auto auto auto 50%, @position);
	.set(@location, @value);
	.translate(-50%, 0);
}
.vc(@outer_height, @location: left, @value: auto, @position: absolute) when (isnumber(@outer_height)) and not(ispercentage(@outer_height)) {
	.pos(50% auto auto auto, @position);
	.set(@location, @value);
	margin-top: @outer_height / 2 * -1;
}
.vc(@outer_height, @location: left, @value: auto, @position: absolute) when (ispercentage(@outer_height)) {
	// 高度为百分比时专用（但IE6-7不支持）
	.pos(0 auto 0 auto, @position);
	.set(@location, @value);
	margin-top: auto;
	margin-bottom: auto;
}
.vc(@location: left, @value: auto, @position: absolute) when (iskeyword(@location)) {
	.pos(50% auto auto auto, @position);
	.set(@location, @value);
	.translate(0, -50%);
}
.hvc(@outer_width, @outer_height, @position: absolute) when (isnumber(@outer_width)) and (isnumber(@outer_height)) and not(ispercentage(@outer_height)) {
	.pos(50% auto auto 50%, @position);
	margin-left: @outer_width / 2 * -1;
	margin-top: @outer_height / 2 * -1;
}
.hvc(@outer_width, @outer_height, @position: absolute) when (isnumber(@outer_width)) and (ispercentage(@outer_height)) {
	// 高度为百分比时专用（但IE6-7不支持）
	.pos(0 auto 0 50%, @position);
	margin-left: @outer_width / 2 * -1;
	margin-top: auto;
	margin-bottom: auto;
}
.hvc(@position: absolute) when (iskeyword(@position)) {
	.pos(50% auto auto 50%, @position);
	.translate(-50%, -50%);
}



// img 专用中央居中（IE6-7不支持）
.imghvc(@position: absolute) {
	display: block;
	margin: auto;
	.pos(0, @position);
}



// 容器内所有子元素的垂直对齐方式（包括行内块元素，IE7及以下浏览器不支持。但是配合IE9.js可以支持）
.va(@align: middle, @pseudo_elements: after, @item: '>*') {
	@selector: e(':@{pseudo_elements}');
	@item_selector: e(@item);
	white-space: nowrap;
	@{item_selector} { .inbl; vertical-align: @align; white-space: normal; }
	&@{selector} {
		content: '';
		.inbl;
		width: 0;
		height: 100%;
		overflow: hidden;
		vertical-align: @align;
	}
}



// 容器内所有子元素两端对齐（包括行内块元素）
// 子元素间必须换行书写才会生效。如果是代码动态生成，请在每个子元素之间插入 &#10; 换行的转移字符
// 注意，在 webkit 浏览器下，父容器的结束标签必须紧跟着最后一个子元素的结尾。否则最后一行结尾会有一个空白（换行符的文本节点）
// 如果需要兼容IE6-7，那么子元素必须全部为原生的行内元素或行内块元素，如：<span>、<img>等。通过 display 设置的行内元素或行内块元素无效
.jy(@align: baseline, @item: '>*') {
	@item_selector: e(@item);
	text-align: justify; //IE6-7下，子元素必须为原生行内元素或者行内块元素
	text-align-last: justify; //IE下设置最后一行的对齐方式，主要为兼容IE6-7
	*text-justify: inter-ideograph; //如果子元素为原生块元素，那么必须声明该属性后，IE6-7下的对齐方式才能生效
	@{item_selector} { .inbl; vertical-align: @align; }
	&:after {
		content: '';
		.inbl;
		width: 100%;
		height: 0;
		font-size: 0;
		overflow: hidden;
	}
}



// 多列平均分布
.mean(@column_count, @item: '>*') {
	@item_selector: e(@item);
	.clear;
	@{item_selector} {
		float: left;
		width: 100% / @column_count;
	}
}



// 常规两侧浮动
.lrf(@left: '>:first-child', @right: '>:nth-child(2)') {
	.clear;
	@left_selector: e(@left);
	@right_selector: e(@right);
	@{left_selector} { float: left; }
	@{right_selector} { float: right; }
}



// 弹性盒布局（IE9及以下浏览器不支持）
.flexbox() {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}
.flexbox(inline) {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-inline-flexbox;
	display: -webkit-inline-flex;
	display: inline-flex;
}
// 是否换行（设置在父元素上）
.flexwrap(@wrap: wrap) {
	-webkit-flex-wrap: @wrap;
	    -ms-flex-wrap: @wrap;
	        flex-wrap: @wrap;
}
// 排列方向（设置在父元素上）
.hflex() {
	-webkit-box-direction: normal;
	   -moz-box-direction: normal;
	-webkit-box-orient: horizontal;
	   -moz-box-orient: horizontal;
	-webkit-flex-direction: row;
	    -ms-flex-direction: row;
	        flex-direction: row;
}
.hflex(reverse) {
	-webkit-box-direction: reverse;
	   -moz-box-direction: reverse;
	-webkit-box-orient: horizontal;
	   -moz-box-orient: horizontal;
	-webkit-flex-direction: row-reverse;
	    -ms-flex-direction: row-reverse;
	        flex-direction: row-reverse;
}
.vflex(){
	-webkit-box-direction: normal;
	   -moz-box-direction: normal;
	-webkit-box-orient: vertical;
	   -moz-box-orient: vertical;
	-webkit-flex-direction: column;
	    -ms-flex-direction: column;
	        flex-direction: column;
}
.vflex(reverse){
	-webkit-box-direction: reverse;
	   -moz-box-direction: reverse;
	-webkit-box-orient: vertical;
	   -moz-box-orient: vertical;
	-webkit-flex-direction: column-reverse;
	    -ms-flex-direction: column-reverse;
	        flex-direction: column-reverse;
}
// 全部水平垂直居中对齐（设置在父元素上）
.flexcenter() {
	       -webkit-box-pack: center;
	          -moz-box-pack: center;
	          -ms-flex-pack: center;
	-webkit-justify-content: center;
	        justify-content: center;

	  -webkit-box-align: center;
	     -moz-box-align: center;
	     -ms-flex-align: center;
	-webkit-align-items: center;
	        align-items: center;

	   -ms-flex-line-pack: center;
	-webkit-align-content: center;
	        align-content: center;
}
// 全部水平垂直两端对齐（设置在父元素上）
.flexjy() {
	       -webkit-box-pack: justify;
	          -moz-box-pack: justify;
	          -ms-flex-pack: justify;
	-webkit-justify-content: space-between;
	        justify-content: space-between;

	  -webkit-box-align: center;
	     -moz-box-align: center;
	     -ms-flex-align: center;
	-webkit-align-items: center;
	        align-items: center;

	   -ms-flex-line-pack: justify;
	-webkit-align-content: space-between;
	        align-content: space-between;
}
// 全部水平垂直平均分布对齐（设置在父元素上）
.flexmean() {
	       -webkit-box-pack: justify;
	          -moz-box-pack: justify;
	          -ms-flex-pack: distribute;
	-webkit-justify-content: space-around;
	        justify-content: space-around;

	  -webkit-box-align: center;
	     -moz-box-align: center;
	     -ms-flex-align: center;
	-webkit-align-items: center;
	        align-items: center;

	   -ms-flex-line-pack: distribute;
	-webkit-align-content: space-around;
	        align-content: space-around;
}
// 比例分配（设置在子元素上）
.flex(@value) {
	-webkit-box-flex: @value;
	   -moz-box-flex: @value;
	    -webkit-flex: @value 1 auto;
	        -ms-flex: @value 1 auto;
	            flex: @value 1 auto;
}
// 次序分配（设置在子元素上）
.order(@val: 0) {
	-webkit-box-ordinal-group: @val + 1;
	   -moz-box-ordinal-group: @val + 1;
	           -ms-flex-order: @val;
	            -webkit-order: @val;
	                    order: @val;
}