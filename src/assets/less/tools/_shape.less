/////////////////////////////////// 图形样式 ///////////////////////////////////

// 弧形
.arc(@width, @height: @width, @border_width: 0) when (isnumber(@width)) {
	.sz(@width - @border_width * 2, @height - @border_width * 2);
	.bdrd(min(@width, @height));
	border-width: @border_width;
	border-style: solid;
}
.arc(@color, @width, @height: @width, @border_width: 0) when (iscolor(extract(@color, 1))) {
	.arc(@width, @height, @border_width);
	background-color: extract(@color, 1);
	& when (length(@color) = 1) { border-color: extract(@color, 1); }
	& when (length(@color) = 2) { border-color: extract(@color, 2); }
}



// 三角
.triangle(top, @color, @width, @height: @width) {
	@width_half: @width * .5;
	.sz(0);
	.bbd(@color, @height);
	.lbd(transparent, @width_half);
	.rbd(transparent, @width_half);
}
.triangle(bottom, @color, @width, @height: @width) {
	@width_half: @width * .5;
	.sz(0);
	.tbd(@color, @height);
	.lbd(transparent, @width_half);
	.rbd(transparent, @width_half);
}
.triangle(left, @color, @width, @height: @width) {
	@height_half: @height * .5;
	.sz(0);
	.rbd(@color, @width);
	.tbd(transparent, @height_half);
	.bbd(transparent, @height_half);
}
.triangle(right, @color, @width, @height: @width) {
	@height_half: @height * .5;
	.sz(0);
	.lbd(@color, @width);
	.tbd(transparent, @height_half);
	.bbd(transparent, @height_half);
}
.triangle(top-left, @color, @width, @height: @width) {
	@width_half: @width * .5;
	@height_half: @height * .5;
	.sz(0);
	.tbd(@color, @height_half);
	.lbd(@color, @width_half);
	.bbd(transparent, @height_half);
	.rbd(transparent, @width_half);
}
.triangle(top-right, @color, @width, @height: @width) {
	@width_half: @width * .5;
	@height_half: @height * .5;
	.sz(0);
	.tbd(@color, @height_half);
	.lbd(transparent, @width_half);
	.bbd(transparent, @height_half);
	.rbd(@color, @width_half);
}
.triangle(bottom-left, @color, @width, @height: @width) {
	@width_half: @width * .5;
	@height_half: @height * .5;
	.sz(0);
	.tbd(transparent, @height_half);
	.lbd(@color, @width_half);
	.bbd(@color, @height_half);
	.rbd(transparent, @width_half);
}
.triangle(bottom-right, @color, @width, @height: @width) {
	@width_half: @width * .5;
	@height_half: @height * .5;
	.sz(0);
	.tbd(transparent, @height_half);
	.lbd(transparent, @width_half);
	.bbd(@color, @height_half);
	.rbd(@color, @width_half);
}



// 三角小箭头
.arr-init(@position, @margin, @pseudo_elements) {
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		content: '';
		display: block;
		width: 0;
		height: 0;
		.pos(@position);
		margin: @margin;
	}
}
// 左箭头
.larr-init(@color, @width, @height, @pseudo_elements: before) {
	@selector: e(':@{pseudo_elements}');
	@height_half: @height / 2;
	&@{selector} {
		.tbd(transparent, @height_half);
		.bbd(transparent, @height_half);
		.rbd(extract(@color, 1), @width);
		_border-top-color: extract(@color, 2);
		_border-bottom-color: extract(@color, 2);
	}
}
.larr(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-right-color: extract(@color, 1);
		_border-top-color: extract(@color, 2); //为了兼容 IE6，可以将其设置为与背景颜色相同
		_border-bottom-color: extract(@color, 2);
	}
}
.larr(@color, @width, @height, @pseudo_elements: before) {
	@height_half: @height / 2;
	.arr-init(50% 100% auto auto, -@height_half -1px 0 0, @pseudo_elements);
	.larr-init(@color, @width, @height, @pseudo_elements);
}
.larr(@color, @width, @height, @position, @margin: 0, @pseudo_elements: before) when not(@position = before) and  not(@position = after) {
	.arr-init(@position, @margin, @pseudo_elements);
	.larr-init(@color, @width, @height, @pseudo_elements);
}
// 右箭头
.rarr-init(@color, @width, @height, @pseudo_elements: before) {
	@selector: e(':@{pseudo_elements}');
	@height_half: @height / 2;
	&@{selector} {
		.tbd(transparent, @height_half);
		.bbd(transparent, @height_half);
		.lbd(extract(@color, 1), @width);
		_border-top-color: extract(@color, 2);
		_border-bottom-color: extract(@color, 2);
	}
}
.rarr(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-left-color: extract(@color, 1);
		_border-top-color: extract(@color, 2);
		_border-bottom-color: extract(@color, 2);
	}
}
.rarr(@color, @width, @height, @pseudo_elements: before) {
	@height_half: @height / 2;
	.arr-init(50% auto auto 100%, -@height_half 0 0 -1px, @pseudo_elements);
	.rarr-init(@color, @width, @height, @pseudo_elements);
}
.rarr(@color, @width, @height, @position, @margin: 0, @pseudo_elements: before) when not(@position = before) and  not(@position = after) {
	.arr-init(@position, @margin, @pseudo_elements);
	.rarr-init(@color, @width, @height, @pseudo_elements);
}
// 上箭头
.tarr-init(@color, @width, @height, @pseudo_elements: before) {
	@selector: e(':@{pseudo_elements}');
	@width_half: @width / 2;
	&@{selector} {
		.lbd(transparent, @width_half);
		.rbd(transparent, @width_half);
		.bbd(extract(@color, 1), @height);
		_border-left-color: extract(@color, 2);
		_border-right-color: extract(@color, 2);
	}
}
.tarr(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-bottom-color: extract(@color, 1);
		_border-left-color: extract(@color, 2);
		_border-right-color: extract(@color, 2);
	}
}
.tarr(@color, @width, @height, @pseudo_elements: before) {
	@width_half: @width / 2;
	.arr-init(auto auto 100% 50%, 0 0 -1px -@width_half, @pseudo_elements);
	.tarr-init(@color, @width, @height, @pseudo_elements);
}
.tarr(@color, @width, @height, @position, @margin: 0, @pseudo_elements: before) when not(@position = before) and  not(@position = after) {
	.arr-init(@position, @margin, @pseudo_elements);
	.tarr-init(@color, @width, @height, @pseudo_elements);
}
// 下箭头
.barr-init(@color, @width, @height, @pseudo_elements: before) {
	@selector: e(':@{pseudo_elements}');
	@width_half: @width / 2;
	&@{selector} {
		.lbd(transparent, @width_half);
		.rbd(transparent, @width_half);
		.tbd(extract(@color, 1), @height);
		_border-left-color: extract(@color, 2);
		_border-right-color: extract(@color, 2);
	}
}
.barr(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-top-color: extract(@color, 1);
		_border-left-color: extract(@color, 2);
		_border-right-color: extract(@color, 2);
	}
}
.barr(@color, @width, @height, @pseudo_elements: before) {
	@width_half: @width / 2;
	.arr-init(100% auto auto 50%, -1px 0 0 -@width_half, @pseudo_elements);
	.barr-init(@color, @width, @height, @pseudo_elements);
}
.barr(@color, @width, @height, @position, @margin: 0, @pseudo_elements: before) when not(@position = before) and  not(@position = after) {
	.arr-init(@position, @margin, @pseudo_elements);
	.barr-init(@color, @width, @height, @pseudo_elements);
}
// 气泡箭头左下
.lbarr-init(@color, @width, @height, @pseudo_elements: before) {
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		.lbd(transparent, @width);
		.tbd(extract(@color, 1), @height);
		_border-left-color: extract(@color, 2);
	}
}
.lbarr(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-top-color: extract(@color, 1);
		_border-left-color: extract(@color, 2);
	}
}
.lbarr(@color, @width, @height, @pseudo_elements: before) {
	@width_half: @width / 2;
	.arr-init(100% auto auto 1em, -1px 0 0 0, @pseudo_elements);
	.lbarr-init(@color, @width, @height, @pseudo_elements);
}
.lbarr(@color, @width, @height, @position, @margin: 0, @pseudo_elements: before) when not(@position = before) and  not(@position = after) {
	.arr-init(@position, @margin, @pseudo_elements);
	.lbarr-init(@color, @width, @height, @pseudo_elements);
}
// 气泡箭头右下
.rbarr-init(@color, @width, @height, @pseudo_elements: before) {
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		.rbd(transparent, @width);
		.tbd(extract(@color, 1), @height);
		_border-right-color: extract(@color, 2);
	}
}
.rbarr(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-top-color: extract(@color, 1);
		_border-right-color: extract(@color, 2);
	}
}
.rbarr(@color, @width, @height, @pseudo_elements: before) {
	@width_half: @width / 2;
	.arr-init(100% 1em auto auto, -1px 0 0 0, @pseudo_elements);
	.rbarr-init(@color, @width, @height, @pseudo_elements);
}
.rbarr(@color, @width, @height, @position, @margin: 0, @pseudo_elements: before) when not(@position = before) and  not(@position = after) {
	.arr-init(@position, @margin, @pseudo_elements);
	.rbarr-init(@color, @width, @height, @pseudo_elements);
}
// 气泡箭头左上
.ltarr-init(@color, @width, @height, @pseudo_elements: before) {
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		.lbd(transparent, @width);
		.bbd(extract(@color, 1), @height);
		_border-left-color: extract(@color, 2);
	}
}
.ltarr(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-bottom-color: extract(@color, 1);
		_border-left-color: extract(@color, 2);
	}
}
.ltarr(@color, @width, @height, @pseudo_elements: before) {
	@width_half: @width / 2;
	.arr-init(auto auto 100% 1em, 0 0 -1px 0, @pseudo_elements);
	.ltarr-init(@color, @width, @height, @pseudo_elements);
}
.ltarr(@color, @width, @height, @position, @margin: 0, @pseudo_elements: before) when not(@position = before) and  not(@position = after) {
	.arr-init(@position, @margin, @pseudo_elements);
	.ltarr-init(@color, @width, @height, @pseudo_elements);
}
// 气泡箭头右上
.rtarr-init(@color, @width, @height, @pseudo_elements: before) {
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		.rbd(transparent, @width);
		.bbd(extract(@color, 1), @height);
		_border-right-color: extract(@color, 2);
	}
}
.rtarr(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-bottom-color: extract(@color, 1);
		_border-right-color: extract(@color, 2);
	}
}
.rtarr(@color, @width, @height, @pseudo_elements: before) {
	@width_half: @width / 2;
	.arr-init(auto 1em 100% auto, 0 0 -1px 0, @pseudo_elements);
	.rtarr-init(@color, @width, @height, @pseudo_elements);
}
.rtarr(@color, @width, @height, @position, @margin: 0, @pseudo_elements: before) when not(@position = before) and  not(@position = after) {
	.arr-init(@position, @margin, @pseudo_elements);
	.rtarr-init(@color, @width, @height, @pseudo_elements);
}




// 镂空小箭头（IE8及以下浏览器不支持）
.arr2-init(@color, @size, @thickness, @position, @margin, @pseudo_elements) {
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		content: '';
		display: block;
		.sz(@size - @thickness);
		.tbd(@color, @thickness);
		.lbd(@color, @thickness);
		.pos(@position);
		margin: @margin;
	}
}
.larr2(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-color: @color;
	}
}
.larr2(@color, @size, @thickness: 2px, @position: auto, @margin: 0, @pseudo_elements: before) {
	.arr2-init(@color, @size, @thickness, @position, @margin, @pseudo_elements);
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		.rotate(-45deg);
	}
}
.rarr2(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-color: @color;
	}
}
.rarr2(@color, @size, @thickness: 2px, @position: auto, @margin: 0, @pseudo_elements: before) {
	.arr2-init(@color, @size, @thickness, @position, @margin, @pseudo_elements);
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		.rotate(135deg);
	}
}
.tarr2(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-color: @color;
	}
}
.tarr2(@color, @size, @thickness: 2px, @position: auto, @margin: 0, @pseudo_elements: before) {
	.arr2-init(@color, @size, @thickness, @position, @margin, @pseudo_elements);
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		.rotate(45deg);
	}
}
.barr2(@color, @pseudo_elements: before) { //仅用于改变箭头颜色
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		border-color: @color;
	}
}
.barr2(@color, @size, @thickness: 2px, @position: auto, @margin: 0, @pseudo_elements: before) {
	.arr2-init(@color, @size, @thickness, @position, @margin, @pseudo_elements);
	@selector: e(':@{pseudo_elements}');
	&@{selector} {
		.rotate(-135deg);
	}
}



// 粗箭头（IE8及以下浏览器不支持）
// 参数1：为箭头的颜色
// 参数2：为箭头的宽度
// 参数3：为箭头的高度
// 参数4：为箭头的厚度
.arr3-init(@color, @width, @height, @pseudo_elemen_width, @pseudo_elemen_height, @padding, @before_angle, @after_angle) {
	width: @width;
	padding: @padding;
	height: @height;
	.ftsz(0);
	&:before,
	&:after {
		content: '';
		display: block;
		width: @pseudo_elemen_width;
		height: @pseudo_elemen_height;
		background-color: @color;
	}
	&:before {
		.skew(extract(@before_angle, 1), extract(@before_angle, 2));
	}
	&:after {
		.skew(extract(@after_angle, 1), extract(@after_angle, 2));
	}
}
.arr3-color(@color) {
	&:before,
	&:after {
		background-color: @color;
	}
}
.larr3(@color, @width, @height, @thickness: @height - @width / 2) {
	@half_height: @height / 2;
	@difference: @width - @thickness;
	@angle: atan(@difference / @half_height);

	.arr3-init(
		@color,
		@difference / 2 + @thickness,
		@height,
		@thickness,
		@half_height,
		0 0 0 @difference / 2,
		-@angle 0,
		@angle 0
	);
}
.rarr3(@color, @width, @height, @thickness: @height - @width / 2) {
	@half_height: @height / 2;
	@difference: @width - @thickness;
	@angle: atan(@difference / @half_height);

	.arr3-init(
		@color,
		@difference / 2 + @thickness,
		@height,
		@thickness,
		@half_height,
		0 0 0 @difference / 2,
		@angle 0,
		-@angle 0
	);
}
.tarr3(@color, @width, @height, @thickness: @height - @width / 2) {
	@half_width: @width / 2;
	@difference: @height - @thickness;
	@angle: atan(@difference / @half_width);

	.arr3-init(
		@color,
		@width,
		@difference / 2 + @thickness,
		@half_width,
		@thickness,
		@difference / 2 0 0 0,
		0 -@angle,
		0 @angle
	);

	&:before,
	&:after {
		.inbl;
	}
}
.barr3(@color, @width, @height, @thickness: @height - @width / 2) {
	@half_width: @width / 2;
	@difference: @height - @thickness;
	@angle: atan(@difference / @half_width);

	.arr3-init(
		@color,
		@width,
		@difference / 2 + @thickness,
		@half_width,
		@thickness,
		@difference / 2 0 0 0,
		0 @angle,
		0 -@angle
	);

	&:before,
	&:after {
		.inbl;
	}
}



// 加号按钮
// @color 可以拆分成3个值
//        第一个值表示 @border_color
//        第二个值表示 @background_color
//        第三个值表示 @pattern_color
// @size 可以拆分成3个值
//        第一个值表示整个按钮的矩形大小
//        第二个值表示 @pattern_thickness
//        第三个值表示 @pattern_length
.add-btn-init(@color, @size, @radius) {

	.getColor(@color) when (length(@color) = 1) {
		@border_color: @color;
		@background_color: @color;
		@pattern_color: white;
	}
	.getColor(@color) when (length(@color) = 2) {
		@border_color: extract(@color, 1);
		@background_color: extract(@color, 1);
		@pattern_color: extract(@color, 2);
	}
	.getColor(@color) when (length(@color) = 3) {
		@border_color: extract(@color, 1);
		@background_color: extract(@color, 2);
		@pattern_color: extract(@color, 3);
	}
	.getColor(@color);

	.getSize(@size) when (length(@size) = 1) {
		@pattern_thickness: round(@size * .1 / 2) * 2;
		@pattern_length: @size - @pattern_thickness * 4;
		@inner_size: @size - @pattern_thickness * 2;
	}
	.getSize(@size) when (length(@size) = 2) {
		@pattern_thickness: extract(@size, 2);
		@pattern_length: extract(@size, 1) - @pattern_thickness * 4;
		@inner_size: extract(@size, 1) - @pattern_thickness * 2;
	}
	.getSize(@size) when (length(@size) = 3) {
		@pattern_thickness: extract(@size, 2);
		@pattern_length: extract(@size, 3);
		@inner_size: extract(@size, 1) - @pattern_thickness * 2;
	}
	.getSize(@size);

	.inbl;
	vertical-align: middle;
	position: relative;
	width: @inner_size;
	height: @inner_size;
	border: @pattern_thickness solid @border_color;
	border-radius: @radius;
	background: @background_color;
	cursor: pointer;

	&:before {
		content: '';
		display: block;
		width: @pattern_length;
		height: @pattern_thickness;
		font-size: 0;
		background: @pattern_color;
		.hvc(@pattern_length, @pattern_thickness);
	}
	&:after {
		content: '';
		display: block;
		width: @pattern_thickness;
		height: @pattern_length;
		font-size: 0;
		background: @pattern_color;
		.hvc(@pattern_thickness, @pattern_length);
	}
}
.add-btn(@size: 30px, @radius: 100%) when (isnumber(extract(@size, 1))) {
	.add-btn-init(@green, @size, @radius);
}
.add-btn(@color, @size: 30px, @radius: 100%) when (iscolor(extract(@color, 1))) {
	.add-btn-init(@color, @size, @radius);
}


// 减号按钮
.sub-btn-init(@color, @size, @radius) {

	.getColor(@color) when (length(@color) = 1) {
		@border_color: @color;
		@background_color: @color;
		@pattern_color: white;
	}
	.getColor(@color) when (length(@color) = 2) {
		@border_color: extract(@color, 1);
		@background_color: extract(@color, 1);
		@pattern_color: extract(@color, 2);
	}
	.getColor(@color) when (length(@color) = 3) {
		@border_color: extract(@color, 1);
		@background_color: extract(@color, 2);
		@pattern_color: extract(@color, 3);
	}
	.getColor(@color);

	.getSize(@size) when (length(@size) = 1) {
		@pattern_thickness: round(@size * .1 / 2) * 2;
		@pattern_length: @size - @pattern_thickness * 4;
		@inner_size: @size - @pattern_thickness * 2;
	}
	.getSize(@size) when (length(@size) = 2) {
		@pattern_thickness: extract(@size, 2);
		@pattern_length: extract(@size, 1) - @pattern_thickness * 4;
		@inner_size: extract(@size, 1) - @pattern_thickness * 2;
	}
	.getSize(@size) when (length(@size) = 3) {
		@pattern_thickness: extract(@size, 2);
		@pattern_length: extract(@size, 3);
		@inner_size: extract(@size, 1) - @pattern_thickness * 2;
	}
	.getSize(@size);

	.inbl;
	vertical-align: middle;
	position: relative;
	width: @inner_size;
	height: @inner_size;
	border: @pattern_thickness solid @border_color;
	border-radius: @radius;
	background: @background_color;
	cursor: pointer;

	&:before {
		content: '';
		display: block;
		width: @pattern_length;
		height: @pattern_thickness;
		font-size: 0;
		background: @pattern_color;
		.hvc(@pattern_length, @pattern_thickness);
	}
}
.sub-btn(@size: 30px, @radius: 100%) when (isnumber(extract(@size, 1))) {
	.sub-btn-init(@red, @size, @radius);
}
.sub-btn(@color, @size: 30px, @radius: 100%) when (iscolor(extract(@color, 1))) {
	.sub-btn-init(@color, @size, @radius);
}


// 关闭按钮
.close-btn(@size: 30px, @radius: 100%) when (isnumber(extract(@size, 1))) {
	.add-btn(white black white, @size, @radius);
	.rotate(45deg);
}
.close-btn(@color, @size: 30px, @radius: 100%) when (iscolor(extract(@color, 1))) {
	.add-btn(@color, @size, @radius);
	.rotate(45deg);
}


// 加号图标
.icon-add-init(@color, @size) {

	.getSize(@size) when (length(@size) = 1) {
		@pattern_size: @size;
		@pattern_thickness: round(@size * .1 / 2) * 2;
	}
	.getSize(@size) when (length(@size) = 2) {
		@pattern_size: extract(@size, 1);
		@pattern_thickness: extract(@size, 2);
	}
	.getSize(@size);

	.inbl;
	vertical-align: middle;
	position: relative;
	width: @pattern_size;
	height: @pattern_size;

	&:before {
		content: '';
		display: block;
		width: @pattern_size;
		height: @pattern_thickness;
		font-size: 0;
		background: @color;
		.hvc(@pattern_size, @pattern_thickness);
	}
	&:after {
		content: '';
		display: block;
		width: @pattern_thickness;
		height: @pattern_size;
		font-size: 0;
		background: @color;
		.hvc(@pattern_thickness, @pattern_size);
	}
}
.icon-add(@size: 30px) when (isnumber(extract(@size, 1))) {
	.icon-add-init(#666, @size);
}
.icon-add(@color, @size: 30px) when (iscolor(@color)) {
	.icon-add-init(@color, @size);
}


// 对勾图标
.icon-hook-init(@color, @size) {

	.getSize(@size) when (length(@size) = 1) {
		@pattern_size: @size;
		@pattern_thickness: @size * .1;
	}
	.getSize(@size) when (length(@size) = 2) {
		@pattern_size: extract(@size, 1);
		@pattern_thickness: extract(@size, 2);
	}
	.getSize(@size);

	.inbl;
	vertical-align: middle;
	width: @pattern_size;
	height: @pattern_size;
	&:before {
		content: '';
		display: block;
		width: 40%;
		height: 70%;
		margin-left: 25%;
		border-right: solid @pattern_thickness @color;
		border-bottom: solid  @pattern_thickness @color;
		border-bottom-right-radius: @pattern_thickness;
		.rotate(45deg);
	}
}
.icon-hook(@size: 30px) when (isnumber(extract(@size, 1))) {
	.icon-hook-init(#666, @size);
}
.icon-hook(@color, @size: 30px) when (iscolor(@color)) {
	.icon-hook-init(@color, @size);
}


// 叉图标
.icon-fork(@size: 30px) when (isnumber(extract(@size, 1))) {
	.icon-add(@size);
	.rotate(45deg);
}
.icon-fork(@color, @size: 30px) when (iscolor(@color)) {
	.icon-add(@color, @size);
	.rotate(45deg);
}



// 字符×
.x-btn(@color: #000, @size: 20px, @active_class: active) {
	.noapp;
	.inbl;
	vertical-align: middle;
	cursor: pointer;
	text-decoration: none;
	font-size: @size;
	font-weight: 700;
	line-height: 1;
	color: @color;
	text-shadow: 0 1px 0 #fff;
	.sz(1em);
	.op(.2);

	&:after {
		content: '×';
		display: block;
		line-height: 1;
		text-align: center;
		position: relative;
		top: -0.06em;
	}

	&.@{active_class},
	&:active,
	&:hover {
		.op(.5);
	}
}


// 搜索图标
.icon-search-init(@color: #666, @size: 30px) {

	.getSize(@size) when (length(@size) = 1) {
		@pattern_size: @size;
		@pattern_thickness: round(@size * .1 / 2) * 2;
		@diameter: round(@pattern_size * .9 / 2) * 2 - @pattern_thickness * 2;
	}
	.getSize(@size) when (length(@size) = 2) {
		@pattern_size: extract(@size, 1);
		@pattern_thickness: extract(@size, 2);
		@diameter: round(@pattern_size * .9 / 2) * 2 - @pattern_thickness * 2;
	}
	.getSize(@size) when (length(@size) = 3) {
		@pattern_size: extract(@size, 1);
		@pattern_thickness: extract(@size, 2);
		@diameter: extract(@size, 3) - @pattern_thickness * 2;
	}
	.getSize(@size);

	@radius: @diameter * .5;

	.inbl;
	position: relative;
	vertical-align: middle;
	width: @pattern_size;
	height: @pattern_size;
	&:before {
		content: '';
		display: block;
		width: @diameter;
		height: @diameter;
		border: solid @pattern_thickness @color;
		.bdrd(100%);
	}
	&:after {
		content: '';
		display: block;
		position: absolute;
		top: sin(45deg) * (@radius + @pattern_thickness / 2) + @radius + @pattern_thickness;
		left: sin(45deg) * (@radius + @pattern_thickness / 2) + @radius + @pattern_thickness;
		width: (@pattern_size - @radius - @pattern_thickness - sin(45deg) * (@radius + @pattern_thickness / 2)) / sin(45deg);
		height: @pattern_thickness;
		margin-top: -@pattern_thickness / 2;
		.bgcl(@color);
		.transform-origin(left center);
		.rotate(45deg);
	}
}
.icon-search(@size: 30px) when (isnumber(extract(@size, 1))) {
	.icon-search-init(#666, @size);
}
.icon-search(@color, @size: 30px) when (iscolor(@color)) {
	.icon-search-init(@color, @size);
}



