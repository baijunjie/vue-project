/////////////////////////////////// 动态图形样式 ///////////////////////////////////

// loading 加载中动画
// 圆环
.loading1(@animation_name, @color: @loading_default_color, @size: 30px) {
	position: relative;
	width: @size*.7;
	height: @size*.7;
	border-radius: 50%;
	border-top: @size*.15 solid fade(@color, 20%);
	border-right: @size*.15 solid fade(@color, 20%);
	border-bottom: @size*.15 solid fade(@color, 20%);
	border-left: @size*.15 solid @color;
	.animate-rotation(@animation_name, 1s);
}

// 半圆环
.loading2(@animation_name, @color: @loading_default_color, @size: 30px) {
	@borderThickness: round(@size*.1);

	position: relative;
	width: @size;
	height: @size;

	&:before {
		content: '';
		display: block;
		position: absolute;
		left: 0;
		top: 0;
		width: @size - @borderThickness * 2;
		height: @size - @borderThickness * 2;
		border-radius: 50%;
		clip: rect(0px, @size / 2, @size, 0);
		border: @borderThickness solid @color;
		-webkit-mask: -webkit-gradient(linear,0 0,0 100%, from(rgba(255,255,255,1)), to(rgba(255,255,255,0)));
		.animate-rotation(@animation_name, 1s);
	}
}

// 菊花点
.loading3(@animation_name, @color: @loading_default_color, @size: 30px) {

	@padding: @size*.4;
	@wh: @size*.2;
	@xy1: @size*.24;
	@xy2: @size*.36;
	@diffuse1: @size*.02;
	@diffuse2: @size*.1;

	width: @wh;
	height: @wh;
	padding: @padding;

	&:after {
		content: '';
		display: block;
		width: 100%;
		height: 100%;
		border-radius: 50%;
		position: relative;
		.animation(@animation_name 1.4s linear infinite);
	}

	@-webkit-keyframes @animation_name { .keyframes('-webkit-'); }
	@-moz-keyframes @animation_name { .keyframes; }
	@keyframes @animation_name { .keyframes; }

	.keyframes(@prefixStr: '') {
		@prefix: e('@{prefixStr}');
		0%,100% {
			@{prefix}box-shadow: 0 -@xy2 0 @diffuse1 @color,
			@xy1 -@xy1 0 0 @color,
			@xy2 0 0 -@diffuse2 @color,
			@xy1 @xy1 0 -@diffuse2 @color,
			0 @xy2 0 -@diffuse2 @color,
			-@xy1 @xy1 0 -@diffuse2 @color,
			-@xy2 0 0 -@diffuse2 @color,
			-@xy1 -@xy1 0 0 @color;
		}
		12.5% {
			@{prefix}box-shadow: 0 -@xy2 0 0 @color,
			@xy1 -@xy1 0 @diffuse1 @color,
			@xy2 0 0 0 @color,
			@xy1 @xy1 0 -@diffuse2 @color,
			0 @xy2 0 -@diffuse2 @color,
			-@xy1 @xy1 0 -@diffuse2 @color,
			-@xy2 0 0 -@diffuse2 @color,
			-@xy1 -@xy1 0 -@diffuse2 @color;
		}
		25% {
			@{prefix}box-shadow: 0 -@xy2 0 -@diffuse2 @color,
			@xy1 -@xy1 0 0 @color,
			@xy2 0 0 @diffuse1 @color,
			@xy1 @xy1 0 0 @color,
			0 @xy2 0 -@diffuse2 @color,
			-@xy1 @xy1 0 -@diffuse2 @color,
			-@xy2 0 0 -@diffuse2 @color,
			-@xy1 -@xy1 0 -@diffuse2 @color;
		}
		37.5% {
			@{prefix}box-shadow: 0 -@xy2 0 -@diffuse2 @color,
			@xy1 -@xy1 0 -@diffuse2 @color,
			@xy2 0 0 0 @color,
			@xy1 @xy1 0 @diffuse1 @color,
			0 @xy2 0 0 @color,
			-@xy1 @xy1 0 -@diffuse2 @color,
			-@xy2 0 0 -@diffuse2 @color,
			-@xy1 -@xy1 0 -@diffuse2 @color;
		}
		50% {
			@{prefix}box-shadow: 0 -@xy2 0 -@diffuse2 @color,
			@xy1 -@xy1 0 -@diffuse2 @color,
			@xy2 0 0 -@diffuse2 @color,
			@xy1 @xy1 0 0 @color,
			0 @xy2 0 @diffuse1 @color,
			-@xy1 @xy1 0 0 @color,
			-@xy2 0 0 -@diffuse2 @color,
			-@xy1 -@xy1 0 -@diffuse2 @color;
		}
		62.5% {
			@{prefix}box-shadow: 0 -@xy2 0 -@diffuse2 @color,
			@xy1 -@xy1 0 -@diffuse2 @color,
			@xy2 0 0 -@diffuse2 @color,
			@xy1 @xy1 0 -@diffuse2 @color,
			0 @xy2 0 0 @color,
			-@xy1 @xy1 0 @diffuse1 @color,
			-@xy2 0 0 0 @color,
			-@xy1 -@xy1 0 -@diffuse2 @color;
		}
		75% {
			@{prefix}box-shadow: 0 -@xy2 0 -@diffuse2 @color,
			@xy1 -@xy1 0 -@diffuse2 @color,
			@xy2 0 0 -@diffuse2 @color,
			@xy1 @xy1 0 -@diffuse2 @color,
			0 @xy2 0 -@diffuse2 @color,
			-@xy1 @xy1 0 0 @color,
			-@xy2 0 0 @diffuse1 @color,
			-@xy1 -@xy1 0 0 @color;
		}
		87.5% {
			@{prefix}box-shadow: 0 -@xy2 0 0 @color,
			@xy1 -@xy1 0 -@diffuse2 @color,
			@xy2 0 0 -@diffuse2 @color,
			@xy1 @xy1 0 -@diffuse2 @color,
			0 @xy2 0 -@diffuse2 @color,
			-@xy1 @xy1 0 0 @color,
			-@xy2 0 0 0 @color,
			-@xy1 -@xy1 0 @diffuse1 @color;
		}
	}
}

// 传统菊花
.loading4(@animation_name, @color: @loading_default_color, @size: 30px) {
	width: @size;
	height: @size;
    .bgsvg('<svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><line id="l" x1="60" x2="60" y1="7" y2="27" stroke="@{color}" stroke-width="11" stroke-linecap="round"/></defs><g><use xlink:href="#l" opacity=".27"/><use xlink:href="#l" opacity=".27" transform="rotate(30 60,60)"/><use xlink:href="#l" opacity=".27" transform="rotate(60 60,60)"/><use xlink:href="#l" opacity=".27" transform="rotate(90 60,60)"/><use xlink:href="#l" opacity=".27" transform="rotate(120 60,60)"/><use xlink:href="#l" opacity=".27" transform="rotate(150 60,60)"/><use xlink:href="#l" opacity=".37" transform="rotate(180 60,60)"/><use xlink:href="#l" opacity=".46" transform="rotate(210 60,60)"/><use xlink:href="#l" opacity=".56" transform="rotate(240 60,60)"/><use xlink:href="#l" opacity=".66" transform="rotate(270 60,60)"/><use xlink:href="#l" opacity=".75" transform="rotate(300 60,60)"/><use xlink:href="#l" opacity=".85" transform="rotate(330 60,60)"/></g></svg>');
	.bgsz(100%);
	.animate-rotation(@animation_name, @duration: 1s, @easing: steps(12, end), @loop: infinite);
}

// chrome-loading
.loading5(@animation_name, @color: @loading_default_color, @size: 30px) {
	width: @size;
	height: @size;
    .bgsvg('<svg version="1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="16px" height="16px" viewBox="0 0 16 16"><style type="text/css">.qp-circular-loader{width:16px;height:16px}.qp-circular-loader-path{stroke-dasharray:32.4;stroke-dashoffset:32.4}.qp-circular-loader,.qp-circular-loader *{transform-origin:50% 50%}@keyframes rotate{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}.qp-circular-loader{animation-duration:1568.63ms;animation-iteration-count:infinite;animation-name:rotate;animation-timing-function:linear}@keyframes fillunfill{from{stroke-dashoffset:32.3}50%{stroke-dashoffset:0}to{stroke-dashoffset:-31.9}}@keyframes rot{from{transform:rotate(0deg)}to{transform:rotate(-360deg)}}@keyframes colors{from{stroke:@{color}}to{stroke:@{color}}}.qp-circular-loader-path{animation-duration:1333ms,5332ms,5332ms;animation-fill-mode:forwards;animation-iteration-count:infinite,infinite,infinite;animation-name:fillunfill,rot,colors;animation-play-state:running,running,running;animation-timing-function:cubic-bezier(0.4,0,.2,1),steps(4),linear}</style><g class="qp-circular-loader"><path class="qp-circular-loader-path" fill="none" d="M 8,1.125 A 6.875,6.875 0 1 1 1.125,8" stroke-width="2.25" stroke-linecap="round"></path></g></svg>');
	.bgsz(100%);
}



// 进度条
// 文档结构如下：
// <div class="progress"><div>50%</div></div>
.progress-color(@color, @progress_bar: '>:first-child') {
	// 颜色可以为一个数组
	// 第一个是进度条的颜色
	// 第二个是背景的颜色
	// 第三个是字体的颜色
	.getColor(@color) when (iscolor(@color)) {
		@bar_color: @color;
		@bg_color: @progress_defalut_bg_color;
		@font_color: contrast(@bar_color, black, white, 60%); //根据进度条颜色的深浅判断字体颜色为白色还是黑色
	}
	.getColor(@color) when (length(@color) = 2) {
		@bar_color: extract(@color, 1);
		@bg_color: extract(@color, 2);
		@font_color: contrast(@bar_color, black, white, 60%);
	}
	.getColor(@color) when (length(@color) = 3) {
		@bar_color: extract(@color, 1);
		@bg_color: extract(@color, 2);
		@font_color: extract(@color, 3);
	}
	.getColor(@color);

	@font_shadow_color: contrast(@font_color, black, white, 60%); //根据字体色的深浅判断字体阴影色为白色还是黑色

	background-color: @bg_color;
	color: @font_color;

	@progress_bar_selector: e(@progress_bar);
	@{progress_bar_selector} {
		background-color: @bar_color;
		text-shadow: 0 1px 0 fade(@font_shadow_color, 60%);
	}
}
.progress-init(@height: 20px, @radius: @height * .5, @progress_bar: '>:first-child') {
	display: block;
	overflow: hidden;
	height: @height;
	font-size: @height * .6;
	border-radius: @radius;
	.transition(all .3s linear);

	@progress_bar_selector: e(@progress_bar);
	@{progress_bar_selector} {
		display: block;
		height: 100%;
		line-height: @height;
		font-size: inherit;
		text-align: center;
		color: inherit;
		.bdrd(@radius);
		.transition(all .3s linear);
	}
}

// 扁平进度条
.progress-flat-color(@color, @progress_bar: '>:first-child') {
	.progress-color(@color, @progress_bar);
}
.progress-flat(@color: @blue, @height: 20px, @radius: @height * .5, @progress_bar: '>:first-child') {
	.progress-init(@height, @radius, @progress_bar);
	.progress-flat-color(@color, @progress_bar);
	.box-shadow(inset 0 1px 3px rgba(0, 0, 0, .3), 0 1px 0 rgba(255, 255, 255, .4), 0 -1px 0 rgba(255, 255, 255, .4););

	@progress_bar_selector: e(@progress_bar);
	@{progress_bar_selector} {
		.box-shadow(inset 0 -1px 0 rgba(0, 0, 0, .2));
	}
}

// 带条纹的进度条
.progress-striped-color(@color, @progress_bar: '>:first-child') {
	.progress-color(@color, @progress_bar);
}
.progress-striped(@color: @blue, @height: 20px, @radius: @height * .5, @progress_bar: '>:first-child') when (iscolor(@color)) {
	.progress-flat(@color, @height, @radius, @progress_bar);

	@progress_bar_selector: e(@progress_bar);
	@{progress_bar_selector} {
		#gradient > .striped();
		background-size: 40px 40px;
	}
}
.progress-striped(@animation_name, @color: @blue, @height: 20px, @radius: @height * .5, @progress_bar: '>:first-child') when not(iscolor(@animation_name)) {
	.progress-striped(@color, @height, @radius);

	@progress_bar_selector: e(@progress_bar);
	@{progress_bar_selector} {
		.animation(@animation_name 2s linear infinite);
	}

	@-webkit-keyframes @animation_name { .keyframes; }
	@-moz-keyframes @animation_name { .keyframes; }
	@keyframes @animation_name { .keyframes; }

	.keyframes() {
		from { background-position: 40px 0; }
		to   { background-position: 0 0; }
	}
}

// 弧面进度条
.progress-arc-color(@color, @progress_bar: '>:first-child') {
	@new_color: darken(@color, max(lightness(@color)-90%,0%));
	@bg_color: lighten(@new_color, max(10%-lightness(@new_color),0%));
	@bg_color_lighten: lighten(@bg_color, 10%);
	@bg_color_darken: darken(@bg_color, 10%);

	.progress-color(@bg_color, @progress_bar);

	@progress_bar_selector: e(@progress_bar);
	@{progress_bar_selector} {
		#gradient > .vertical(@bg_color_lighten, @bg_color_darken);
	}
}
.progress-arc(@color: @blue, @height: 40px, @radius: @height * .5, @progress_bar: '>:first-child') {
	.progress-init(@height, @radius, @progress_bar);
	.progress-arc-color(@color, @progress_bar);
	.box-shadow(inset 0 1px 3px rgba(0, 0, 0, .3), 0 1px 0 rgba(255, 255, 255, .4), 0 -1px 0 rgba(255, 255, 255, .4););

	@progress_bar_selector: e(@progress_bar);
	@{progress_bar_selector} {
		.box-shadow(inset 0 -1px 0 rgba(0, 0, 0, .2), inset 0 @height*.3 0 rgba(255, 255, 255, .2););
	}
}

// 镂空进度条
.progress-hollow-color(@color, @progress_bar: '>:first-child') {
	.progress-color(@color, @progress_bar);
	.box-shadow(0 0 0 .1em @bar_color);
	border-color: @bg_color;
}
.progress-hollow(@color: @blue, @height: 20px, @radius: @height * .5, @progress_bar: '>:first-child') {

	@border_width: round(@height * .1);
	@inner_height: @height - @border_width * 2;

	.progress-init(@inner_height, @radius, @progress_bar);
	.progress-hollow-color(@color, @progress_bar);

	border-width: @border_width;
	border-style: solid;
	font-size: @height * .6;
}



// 导航条开关
.navbar-toggle-init(@color, @size, @active_class) {

	.getColor(@color) when (length(@color) = 1) {
		@bg_color: @color;
		@active_bg_color: @color;
	}
	.getColor(@color) when (length(@color) = 2) {
		@bg_color: extract(@color, 1);
		@active_bg_color: extract(@color, 2);
	}
	.getColor(@color);

	@width: extract(@size, 1);
	@height: round(@width * .8 / 2) * 2;

	.getSize(@size) when (length(@size) = 1) {
		@thickness: round(@size * .15 / 2) * 2;
	}
	.getSize(@size) when (length(@size) = 2) {
		@thickness: extract(@size, 2);
	}
	.getSize(@size);

	@easing: cubic-bezier(.175, .885,.32,1.275);

	width: @width;
	height: @thickness;
	margin-top: (@height - @thickness) * .5;
	margin-bottom: (@height - @thickness) * .5;
	background: @bg_color;
	position: relative;
	.transition(height .4s);
	.transition(margin .4s);
	.transition(background .4s);

	&:before,
	&:after {
		content: '';
		display: block;
		width: @width;
		height: @thickness;
		font-size: 0;
		background: @color;
		position: absolute;
		left: 0;
		.transform-origin(center);
	}

	&:before {
		top: 0;
		margin-top: (@height - @thickness) * .5;
		.transition(background .4s @easing);
		.transition(top .4s @easing);
		.transition(margin .4s @easing);
		.transition-transform(.4s @easing);
	}

	&:after {
		bottom: 0;
		margin-bottom: (@height - @thickness) * .5;
		.transition(background .4s @easing);
		.transition(bottom .4s @easing);
		.transition(margin .4s @easing);
		.transition-transform(.4s @easing);
	}

	&.@{active_class} {
		height: 0;
		margin-top: @height * .5;
		margin-bottom: @height * .5;
		background: transparent;

		&:before {
			background: @active_bg_color;
			top: 50%;
			margin-top: -@thickness * .5;
			.rotate(45deg);
		}
		&:after {
			background: @active_bg_color;
			bottom: 50%;
			margin-bottom: -@thickness * .5;
			.rotate(-45deg);
		}
	}
}
.navbar-toggle(@size: 24px, @active_class: active) when (isnumber(extract(@size, 1))) {
	.navbar-toggle-init(black, @size, @active_class);
}
.navbar-toggle(@color, @size: 24px, @active_class: active) when (iscolor(extract(@color, 1))) {
	.navbar-toggle-init(@color, @size, @active_class);
}

