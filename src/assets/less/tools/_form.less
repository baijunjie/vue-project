/////////////////////////////////// 表单样式 ///////////////////////////////////

// 按钮初始化
.btn-init() {
	.inbl;
	outline: none;
	cursor: pointer;
	line-height: 1em;
	vertical-align: middle;
	text-align: center;
	text-decoration: none !important;
	white-space: nowrap;
	padding: 0 1em;
	margin: 0; // 清除 webkit 浏览器中所有表单元素会有默认的 margin：2px
	border: 0;
	background: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
	.box-sizing(border-box);
	.user-select(none);
	-webkit-appearance: none; // IOS下的表单元素会有默认的样式，且无法通过CSS重置，因此需要将其的渲染设置为 none
	-moz-appearance: none;
	-webkit-touch-callout: none; // 禁止长按弹出菜单

	&.disabled,
	&[disabled] {
		cursor: not-allowed;
		pointer-events: none;
	}

	// 火狐浏览器下按钮元素会有私有的 padding 和 border，需要通过私有伪类来重置
	&::-moz-focus-inner {
		padding: 0;
		border: 0;
	}
}
// @font_size 可以为两个值的数组
// 第一个值代表字体大小
// 第二个值代表高度
.btn-size(@font_size, @no_border: false) {
	.ftsz(extract(@font_size, 1), center);
	.getSizeAndHeight();

	.getSizeAndHeight() when (length(@font_size) = 1) {
		@size: @font_size;
		@height: @font_size * 2;
		height: 2em;
	}
	.getSizeAndHeight() when (length(@font_size) = 2) {
		@size: extract(@font_size, 1);
		@height: extract(@font_size, 2);
		height: @height;
	}

	& when (@no_border = true) {
		padding-top: (@height - @size) * .5;
		padding-bottom: (@height - @size) * .5;
	}
	& when not(@no_border = true) {
		padding-top: (@height - @size - 2px) * .5;
		padding-bottom: (@height - @size - 2px) * .5;
	}
}


// 扁平按钮
.btn-flat-color(@btn_color) {
	@new_color: darken(@btn_color, max(lightness(@btn_color)-95%,0%));
	@bg_color: lighten(@new_color, max(20%-lightness(@new_color),0%));
	@bg_color2: desaturate(@bg_color, 20%);
	@bg_color_lighten: lighten(@bg_color, 5%);
	@bg_color_darken: darken(@bg_color, 5%);
	@bg_color_darken2: darken(@bg_color, 20%);
	@ft_color: contrast(@bg_color, black, white, 65%); //根据背景色的深浅判断字体颜色为白色还是黑色
	@bd_color: darken(@bg_color_darken,max(lightness(@bg_color_darken)-70%,0%)); //边框色的亮度值不超过70%
	@bd_color_lighten: lighten(@bd_color, 5%);
	@ttsd_color: contrast(@ft_color, fade(@bg_color_darken2, 40%), white, 40%); //根据字体色的深浅判断字体阴影颜色为白色还是暗色
	@ttsd_color2: rgba(255, 255, 255, .4);

	@disabled_color: @gray;
	@disabled_color_darken: darken(@disabled_color, 30%);

	color: @ft_color;
	text-shadow: 0 -1px 0 @ttsd_color;
	border-color: @bd_color;
	background: @bg_color;

	&.disabled,
	&[disabled] {
		color: white !important;
		text-shadow: 0 -1px 0 fade(@disabled_color_darken, 40%) !important;
		border-color: @disabled_color !important;
		.box-shadow(none) !important;
		background: @disabled_color !important;
	}

	&:hover {
		color: @ft_color;
		border-color: @bd_color_lighten;
		background: @bg_color_lighten;
	}
	&:active,
	&.active {
		color: @bg_color_darken2;
		text-shadow: 0 1px 0 @ttsd_color2;
		.box-shadow(inset 0 1px 3px rgba(0, 0, 0, .3));
		background: @bg_color2;
	}
}
.btn-flat(@font_size: @form_default_font_size, @radius: .25em) when (isnumber(@font_size)) {
	.btn-init();
	.btn-size(@font_size);
	.btn-flat-color(@btn_flat_defalut_color);
	.transition(all .15s);
	border-width: 1px;
	border-style: solid;
	.bdrd(@radius);
}
.btn-flat(@btn_color, @font_size: @form_default_font_size, @radius: .25em) when (default()) {
	.btn-init();
	.btn-size(@font_size);
	.btn-flat-color(@btn_color);
	.transition(all .15s);
	border-width: 1px;
	border-style: solid;
	.bdrd(@radius);
}


// 弧面按钮
.btn-arc-color(@btn_color) {
	// 控制背景色的亮度值在10%~90%之间
	@new_color: darken(@btn_color, max(lightness(@btn_color)-90%,0%));
	@bg_color: lighten(@new_color, max(20%-lightness(@new_color),0%));
	@bg_color2: desaturate(@bg_color, 20%);
	@bg_color_lighten: lighten(@bg_color, 10%);
	@bg_color_darken: darken(@bg_color, 10%);
	@bg_color_darken2: darken(@bg_color, 20%);
	@ft_color: contrast(@bg_color, black, white, 65%); //根据背景色的深浅判断字体颜色为白色还是黑色
	@bd_color: darken(@bg_color_darken,max(lightness(@bg_color_darken)-70%,0%)); //边框色的亮度值不超过70%
	@ttsd_color: contrast(@ft_color, fade(@bg_color_darken2, 40%), white, 40%); //根据字体色的深浅判断字体阴影颜色为白色还是暗色
	@ttsd_color2: rgba(255, 255, 255, .4);

	@disabled_color: @gray;
	@disabled_color_lighten: lighten(@disabled_color, 5%);
	@disabled_color_darken: darken(@disabled_color, 5%);
	@disabled_color_darken2: darken(@disabled_color, 30%);

	color: @ft_color;
	background-color: @bg_color2;
	text-shadow: 0 -1px 0 @ttsd_color;
	border-color: @bd_color;
	.box-shadow(inset 0 1px 0 rgba(255, 255, 255, .4), 0 1px 2px rgba(0, 0, 0, .3););
	#gradient > .vertical(@bg_color_lighten, @bg_color_darken);

	&.disabled,
	&[disabled] {
		color: white !important;
		text-shadow: 0 -1px 0 fade(@disabled_color_darken2, 40%) !important;
		border-color: @disabled_color !important;
		.box-shadow(inset 0 1px 0 rgba(255, 255, 255, .4), 0 1px 2px rgba(0, 0, 0, .3);) !important;
		#gradient > .vertical(@disabled_color_lighten, @disabled_color_darken) !important;
	}

	&:hover {
		color: @ft_color;
		#gradient > .vertical(@bg_color_darken, @bg_color_lighten);
	}
	&:active,
	&.active {
		color: @bg_color_darken2;
		text-shadow: 0 1px 0 @ttsd_color2;
		.box-shadow(inset 0 1px 3px rgba(0, 0, 0, .3), 0 1px 0 rgba(255, 255, 255, .4););
		background-image: none;
		.reset-filter;
	}
}
.btn-arc(@font_size: @form_default_font_size, @radius: .25em) when (isnumber(@font_size)) {
	.btn-init();
	.btn-size(@font_size);
	.btn-arc-color(@btn_arc_defalut_color);
	.transition(all .15s);
	border-width: 1px;
	border-style: solid;
	.bdrd(@radius);
}
.btn-arc(@btn_color, @font_size: @form_default_font_size, @radius: .25em) when (default()) {
	.btn-init();
	.btn-size(@font_size);
	.btn-arc-color(@btn_color);
	.transition(all .15s);
	border-width: 1px;
	border-style: solid;
	.bdrd(@radius);
}


// 立体按钮
.btn-cube-color(@btn_color) {
	@new_color: darken(@btn_color, max(lightness(@btn_color)-95%,0%));
	@bg_color: lighten(@new_color, max(20%-lightness(@new_color),0%));
	@bg_color_lighten: lighten(@bg_color, 5%);
	@bg_color_darken: darken(@bg_color, 10%);
	@bg_color_darken2: darken(@bg_color, 20%);
	@ft_color: contrast(@bg_color, black, white, 65%); //根据背景色的深浅判断字体颜色为白色还是黑色
	@ttsd_color: contrast(@ft_color, fade(@bg_color_darken2, 40%), white, 40%); //根据字体色的深浅判断字体阴影颜色为白色还是暗色
	@bxsd_color: rgba(0, 0, 0, 0.1);
	@bxsd_color2: rgba(255, 255, 255, .4);
	@bxsd_color3: rgba(255, 255, 255, .1);

	@disabled_color: @gray;
	@disabled_color_darken: darken(@disabled_color, 10%);
	@disabled_color_darken2: darken(@disabled_color, 30%);

	color: @ft_color;
	background: @bg_color;
	text-shadow: 0 1px 0 @ttsd_color;
	.box-shadow(0 .25em 0 @bg_color_darken);
	.box-shadow(0 .5em 0 @bxsd_color);
	.box-shadow(inset 0 1px 0 @bxsd_color2);
	.box-shadow(inset 0 -1px 0 @bxsd_color3);

	&.disabled,
	&[disabled] {
		color: white !important;
		text-shadow: 0 1px 0 fade(@disabled_color_darken2, 40%) !important;
		.box-shadow(0 .25em 0 @disabled_color_darken) !important;
		.box-shadow(0 .5em 0 @bxsd_color) !important;
		.box-shadow(inset 0 1px 0 @bxsd_color2) !important;
		.box-shadow(inset 0 -1px 0 @bxsd_color3) !important;
		background: @disabled_color !important;
	}

	&:hover {
		color: @ft_color;
		background: @bg_color_lighten;
	}
	&:active,
	&.active {
		color: @ft_color;
		.box-shadow(0 .1em 0 @bg_color_darken);
		.box-shadow(0 .2em 0 @bxsd_color);
		.box-shadow(inset 0 1px 0 @bxsd_color2);
		.box-shadow(inset 0 -1px 0 @bxsd_color3);
	}
}
.btn-cube(@font_size: @form_default_font_size, @radius: .25em) when (isnumber(@font_size)) {
	.btn-init();
	.btn-size(@font_size, true);
	.btn-cube-color(@btn_cube_defalut_color);
	.transition(all .15s);
	font-weight: bold;
	.bdrd(@radius);

	position: relative;
	top: 0;
	margin-bottom: .5em;

	&:active,
	&.active {
		top: .15em;
	}
}
.btn-cube(@btn_color, @font_size: @form_default_font_size, @radius: .25em) when (default()) {
	.btn-init();
	.btn-size(@font_size, true);
	.btn-cube-color(@btn_color);
	.transition(all .15s);
	font-weight: bold;
	.bdrd(@radius);

	position: relative;
	top: 0;
	margin-bottom: .5em;

	&:active,
	&.active {
		top: .15em;
	}
}


// apple 空心按钮
.btn-hollow-color(@color) {
	.getColor(@color) when (iscolor(@color)) {
		@btn_color: @color;
		@bg_color: contrast(@color, black, white, 65%); //根据按钮色的深浅判断背景颜色为白色还是按钮色
	}
	.getColor(@color) when (length(@color) = 2) {
		@btn_color: extract(@color, 1);
		@bg_color: extract(@color, 2);
	}
	.getColor(@color);

	color: @btn_color;
	border-color: @btn_color;
	background: transparent;

	&.disabled,
	&[disabled] {
		color: @gray !important;
		border-color: @gray !important;
		background: transparent !important;
	}

	&:hover {
		color: @btn_color;
		background: fade(@btn_color, 10%);
	}
	&:active,
	&.active {
		color: @bg_color;
		background: @btn_color;
	}
}
.btn-hollow(@font_size: @form_default_font_size, @radius: .25em) when (isnumber(@font_size)) {
	.btn-init();
	.btn-size(@font_size);
	.btn-hollow-color(@btn_hollow_defalut_color #ffffff);
	.transition(all .15s);
	border-width: 1px;
	border-style: solid;
	.bdrd(@radius);
}
.btn-hollow(@btn_color, @font_size: @form_default_font_size, @radius: .25em) when (default()) {
	.btn-init();
	.btn-size(@font_size);
	.btn-hollow-color(@btn_color);
	.transition(all .15s);
	border-width: 1px;
	border-style: solid;
	.bdrd(@radius);
}
.btn-hollow-gbcl(@bg_color) {
	&:active,
	&.active { color: @bg_color; }
}



// Bootstrap 表单输入字段样式
// 可应用于以下表单控件:
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.input-init() {
	.inbl;
	padding: .5em;
	margin: 0;
	border-width: 1px;
	border-style: solid;
	line-height: 1em;
	vertical-align: middle;
	color: @input_font_color;
	.box-sizing(border-box);
	.placeholder;

	&:focus {
		outline: 0;
	}

	&.disabled,
	&[disabled],
	&[readonly] {
		cursor: not-allowed !important;
	}
}
// @font_size 可以为两个值的数组
// 第一个值代表字体大小
// 第二个值代表高度
.input-size(@font_size, @no_border: false) {
	.ftsz(extract(@font_size, 1), left);
	.getSizeAndHeight();

	.getSizeAndHeight() when (length(@font_size) = 1) {
		@size: @font_size;
		@height: @font_size * 2;
		height: 2em;
	}
	.getSizeAndHeight() when (length(@font_size) = 2) {
		@size: extract(@font_size, 1);
		@height: extract(@font_size, 2);
		height: @height;
	}

	& when (@no_border = true) {
		padding-top: (@height - @size) * .5;
		padding-bottom: (@height - @size) * .5;
	}
	& when not(@no_border = true) {
		padding-top: (@height - @size - 2px) * .5;
		padding-bottom: (@height - @size - 2px) * .5;
	}
}
.input-bdcl(@border_color, @radius: 0) when not(iscolor(extract(@border_color,1))) {
	border-color: transparent;
	.bdrd(@radius);
	background: transparent;
	.box-shadow(none);
	.transition(none);

	&:focus {
		border-color: transparent !important;
		.box-shadow(none) !important;
	}

	&.disabled,
	&[disabled],
	&[readonly] {
		border-color: transparent !important;
		.box-shadow(none) !important;
		background: transparent !important;
	}
}
.input-bdcl(@border_color, @radius: .25em) when (iscolor(extract(@border_color,1))) {
	& when (length(@border_color) = 1) {
		border-color: @input_default_border_color;
	}
	& when (length(@border_color) = 2) {
		border-color: extract(@border_color,2);
	}
	.bdrd(@radius);
	background: @input_bg_color;
	.box-shadow(inset 0 1px 1px rgba(0, 0, 0, .1));
	.transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s;);

	@focus_border_color: extract(@border_color,1);
	&:focus {
		border-color: @focus_border_color !important;
		.box-shadow(inset 0 1px 1px rgba(0, 0, 0, .1), 0 0 8px fade(@focus_border_color,60%);) !important;
	}

	&.disabled,
	&[disabled],
	&[readonly] {
		& when (length(@border_color) = 1) {
			border-color: @input_default_border_color !important;
		}
		& when (length(@border_color) = 2) {
			border-color: extract(@border_color,2) !important;
		}
		.box-shadow(inset 0 1px 1px rgba(0, 0, 0, .1)) !important;
		background: @input_disable_bg_color !important;
	}
}
.removeOutShadow() {
	// 某些Android设备下有BUG，如果为textarea设置了外阴影，当textarea文本溢出滚动时，文本会超出textarea顶部
	// 因此该方法用于消除外阴影
	&:focus {
		.box-shadow(inset 0 1px 1px rgba(0, 0, 0, .1)) !important;
	}
}
.input(@border_color: @input_focus_border_color, @font_size: @form_default_font_size, @radius: .25em) {
	.input-init();
	.input-size(@font_size);
	.input-bdcl(@border_color, @radius);
}



// 下拉选择框
// select
//
// @select 为非false时的文档结构：
// <div class="select">
// 	<select name="" id="">
// 		<option value="">请选择</option>
// 	</select>
// </div>
//
// @select 为false时只需要一个单标签即可
.select-style(@border_color, @font_size, @radius, @select) {

	& when (@select = false) {
		.input(@border_color, @font_size, @radius);
		position: relative;
		cursor: pointer;
		padding-right: 1.2em;
		.acl(none);

		&.disabled,
		&[disabled] {
			pointer-events: none;
		}
	}

	& when not(@select = false) {
		.inbl;
		font-size: @font_size;
		line-height: 0;
		position: relative;
		cursor: pointer;

		select {
			.input(@border_color, @font_size, @radius);
			-webkit-appearance: none; // IOS下的表单元素会有默认的样式，且无法通过CSS重置，因此需要将其的渲染设置为 none
			-moz-appearance: none;
			padding-right: 1.2em;
			width: 100%;
			&::-ms-expand { // 隐藏掉ie10+下拉框的按钮
				display: none;
			}
		}

		&.disabled,
		&[disabled] {
			cursor: not-allowed !important;
			select {
				pointer-events: none;
				& when (length(@border_color) = 1) {
					border-color: @input_default_border_color !important;
				}
				& when (length(@border_color) = 2) {
					border-color: extract(@border_color,2) !important;
				}
			}
		}
	}
}
// 修改select边框色
.select-bdcl(@border_color, @radius: .25em, @select: true) {
	& when (@select = false) {
		.input-bdcl(@border_color, @radius);
	}

	& when not(@select = false) {
		select {
			.input-bdcl(@border_color, @radius);
		}
	}
}
// 正常箭头
.select-init(@border_color, @arrow_color, @font_size, @radius, @select) {
	.select-style(@border_color, @font_size, @radius, @select);
	.barr(@arrow_color @input_bg_color, .5em, .5em, 50% .5em auto auto, -.25em 0 0 0, after);
	&:after { z-index: 1; }
}
.select(@font_size: @form_default_font_size, @radius: .25em, @select: true) when (isnumber(@font_size)) {
	.select-init(@blue, @select_arr_default_color, @font_size, @radius, @select);
}
.select(@color, @font_size: @form_default_font_size, @radius: .25em, @select: true) when (length(@color) = 1) and not(iscolor(@color)) and not(isnumber(@color)) {
	.select-init(none, @select_arr_default_color, @font_size, @radius, @select);
}
.select(@color, @font_size: @form_default_font_size, @radius: .25em, @select: true) when (length(@color) = 1) and (iscolor(@color)) {
	.select-init(@color, @color, @font_size, @radius, @select);
}
.select(@color, @font_size: @form_default_font_size, @radius: .25em, @select: true) when (length(@color) = 2) {
	.select-init(extract(@color, 1), extract(@color, 2), @font_size, @radius, @select);
}
.select(@color, @font_size: @form_default_font_size, @radius: .25em, @select: true) when (length(@color) = 3) {
	.select-init(extract(@color, 1) extract(@color, 2), extract(@color, 3), @font_size, @radius, @select);
}
// 右下箭头
.select2-init(@border_color, @arrow_color, @font_size, @radius, @select) {
	.select-style(@border_color, @font_size, @radius, @select);
	.barr(@arrow_color @input_bg_color, 1em, .5em, auto 0 .2em auto, 0, after);
	&:after {
		z-index: 1;
		.rotate(-45deg);
	}
}
.select2(@font_size: @form_default_font_size, @radius: .25em, @select: true) when (isnumber(@font_size)) {
	.select2-init(@blue, @select_arr_default_color, @font_size, @radius, @select);
}
.select2(@color, @font_size: @form_default_font_size, @radius: .25em, @select: true) when (length(@color) = 1) and not(iscolor(@color)) and not(isnumber(@color)) {
	.select2-init(none, @select_arr_default_color, @font_size, @radius, @select);
}
.select2(@color, @font_size: @form_default_font_size, @radius: .25em, @select: true) when (length(@color) = 1) and (iscolor(@color)) {
	.select2-init(@color, @color, @font_size, @radius, @select);
}
.select2(@color, @font_size: @form_default_font_size, @radius: .25em, @select: true) when (length(@color) = 2) {
	.select2-init(extract(@color, 1), extract(@color, 2), @font_size, @radius, @select);
}
.select2(@color, @font_size: @form_default_font_size, @radius: .25em, @select: true) when (length(@color) = 3) {
	.select2-init(extract(@color, 1) extract(@color, 2), extract(@color, 3), @font_size, @radius, @select);
}



// 表单组
.form-group(h) {
	vertical-align: middle;
	.ftsz(0);

	select,
	textarea,
	input,
	button,
	a {
		&:focus {
			position: relative;
			z-index: 1;
		}
	}

	>select:not(:first-child),
	>textarea:not(:first-child),
	>input:not(:first-child),
	>button:not(:first-child),
	>a:not(:first-child),
	>:not(:first-child) select,
	>:not(:first-child) textarea,
	>:not(:first-child) input,
	>:not(:first-child) button,
	>:not(:first-child) a {
		margin-left: -1px !important;
		border-top-left-radius: 0 !important;
		border-bottom-left-radius: 0 !important;
	}

	>select:not(:last-child),
	>textarea:not(:last-child),
	>input:not(:last-child),
	>button:not(:last-child),
	>a:not(:last-child),
	>:not(:last-child) select,
	>:not(:last-child) textarea,
	>:not(:last-child) input,
	>:not(:last-child) button,
	>:not(:last-child) a {
		border-top-right-radius: 0 !important;
		border-bottom-right-radius: 0 !important;
	}
}
.form-group(v) {
	vertical-align: middle;
	.ftsz(0);

	select,
	textarea,
	input,
	button,
	a {
		&:focus {
			position: relative;
			z-index: 1;
		}
	}

	>select:not(:first-child),
	>textarea:not(:first-child),
	>input:not(:first-child),
	>button:not(:first-child),
	>a:not(:first-child),
	>:not(:first-child) select,
	>:not(:first-child) textarea,
	>:not(:first-child) input,
	>:not(:first-child) button,
	>:not(:first-child) a {
		margin-top: -1px !important;
		border-top-left-radius: 0 !important;
		border-top-right-radius: 0 !important;
	}

	>select:not(:last-child),
	>textarea:not(:last-child),
	>input:not(:last-child),
	>button:not(:last-child),
	>a:not(:last-child),
	>:not(:last-child) select,
	>:not(:last-child) textarea,
	>:not(:last-child) input,
	>:not(:last-child) button,
	>:not(:last-child) a {
		border-bottom-left-radius: 0 !important;
		border-bottom-right-radius: 0 !important;
	}
}



// 复选框
// 可应用于以下表单控件：
// input[type="radio"]
// input[type="checkbox"]
// 文档结构：
// <div class="checkbox"><input type="checkbox"><i></i></div>
.checkbox-init(@border_color, @checked_color, @background_color, @size, @radius, @elem) {
	@selector: e(@elem);

	position: relative;
	.inbl;
	width: @size;
	height: @size;
	.bdrd(@radius);
	background: @background_color;
	border: 1px solid @border_color;
	vertical-align: middle;
	overflow: hidden;
	.box-sizing(border-box);

	&.disabled,
	&[disabled] {
		cursor: not-allowed;
		pointer-events: none;
		.op(.5);
	}

	&:before {
		content: '';
		display: block;
		width: 40%;
		height: 70%;
		margin-left: 25%;
		border-right: solid @size*.1 @checked_color;
		border-bottom: solid  @size*.1 @checked_color;
		border-bottom-right-radius: @size*.1;
		.rotate(45deg);
	}

	input[type="radio"],
	input[type="checkbox"] {
		.noapp;
		width: 100%;
		height: 100%;
		position: absolute;
		left: 0;
		top: 0;
		z-index: 1;
		.op(0);

		& + @{selector} {
			display: block;
			width: 100%;
			height: 100%;
			background: @background_color;
			.bdrd(@radius);
			position: absolute;
			left: 0;
			top: 0;
		}

		&:checked + @{selector} {
			.transition(left .3s);
			left: 100%;
		}
	}
}
.checkbox(@size: 22px, @radius: 4px, @elem: '*') when (isnumber(@size)) {
	.checkbox-init(@checkbox_default_color, @checkbox_default_color, @checkbox_default_bg_color, @size, @radius, @elem);
}
.checkbox(@color, @size: 22px, @radius: 4px, @elem: '*') when (length(@color) = 1) and (iscolor(@color)) {
	.checkbox-init(@color, @color, @checkbox_default_bg_color, @size, @radius, @elem);
}
.checkbox(@color, @size: 22px, @radius: 4px, @elem: '*') when (length(@color) = 2) {
	.checkbox-init(extract(@color, 1), extract(@color, 2), @checkbox_default_bg_color, @size, @radius, @elem);
}
.checkbox(@color, @size: 22px, @radius: 4px, @elem: '*') when (length(@color) = 3) {
	.checkbox-init(extract(@color, 1), extract(@color, 2), extract(@color, 3), @size, @radius, @elem);
}


// 单选框
// 可应用于以下表单控件：
// input[type="radio"]
// input[type="checkbox"]
// 文档结构：
// <div class="radio"><input type="radio"><i></i></div>
.radio-init(@border_color, @checked_color, @background_color, @size, @radius, @elem) {
	@selector: e(@elem);

	position: relative;
	.inbl;
	width: @size;
	height: @size;
	.bdrd(@radius);
	background: @background_color;
	border: 1px solid @border_color;
	vertical-align: middle;
	.box-sizing(border-box);

	&.disabled,
	&[disabled] {
		cursor: not-allowed;
		pointer-events: none;
		.op(.5);
	}

	input[type="radio"],
	input[type="checkbox"] {
		.noapp;
		width: 100%;
		height: 100%;
		position: absolute;
		left: 0;
		top: 0;
		z-index: 1;
		.op(0);

		& + @{selector} {
			display: block;
			width: 50%;
			height: 50%;
			.bdrd(@radius);
			background: @checked_color;
			.hvc(50%, 50%);
			.transition(all .3s);
			.op(0);
			.scale(0);
		}

		&:checked + @{selector} {
			.op(1);
			.scale(1);
		}
	}
}
.radio(@size: 22px, @radius: 100%, @elem: '*') when (isnumber(@size)) {
	.radio-init(@radio_default_color, @radio_default_color, @radio_default_bg_color, @size, @radius, @elem);
}
.radio(@color: @blue, @size: 22px, @radius: 100%, @elem: '*') when (length(@color) = 1) and (iscolor(@color)) {
	.radio-init(@color, @color, @radio_default_bg_color, @size, @radius, @elem);
}
.radio(@color, @size: 22px, @radius: 100%, @elem: '*') when (length(@color) = 2) {
	.radio-init(extract(@color, 1), extract(@color, 2), @radio_default_bg_color, @size, @radius, @elem);
}
.radio(@color, @size: 22px, @radius: 100%, @elem: '*') when (length(@color) = 3) {
	.radio-init(extract(@color, 1), extract(@color, 2), extract(@color, 3), @size, @radius, @elem);
}



// 开关
// 可应用于以下表单控件：
// input[type="radio"]
// input[type="checkbox"]
// 文档结构：
// <div class="switch"><input type="checkbox"><i></i></div>
.switch-init(@color, @width, @height, @elem) {
	@inner_width: @width - 4px;
	@inner_height: @height - 4px;
	@selector: e(@elem);

	.getColor(@color) when (length(@color) = 1) {
		@checked_color: @color;
		@border_color: @switch_border_color;
		@bg_color: #fff;
	}
	.getColor(@color) when (length(@color) = 2) {
		@checked_color: extract(@color, 1);
		@border_color: extract(@color, 2);
		@bg_color: transparent;
	}
	.getColor(@color);

	position: relative;
	.inbl;
	width: @width;
	height: @height;
	vertical-align: middle;

	&.disabled,
	&[disabled] {
		cursor: not-allowed;
		pointer-events: none;
		.op(.5);
	}

	input[type="radio"],
	input[type="checkbox"] {
		.noapp;
		width: 100%;
		height: 100%;
		position: absolute;
		left: 0;
		top: 0;
		z-index: 1;
		.op(0);
		cursor: pointer;

		&.disabled,
		&[disabled] {
			cursor: not-allowed;
			pointer-events: none;
			.op(.5);

			& + @{selector} { .op(.5); }
		}

		& + @{selector} {
			position: relative;
			display: block;
			width: @inner_width;
			height: @inner_height;
			.bdrd(@height / 2);
			border: 2px solid @border_color;
			background: @border_color;
			.transition(background-color .3s, border-color .3s;);

			&:before {
				content: '';
				display: block;
				position: absolute;
				width: 100%;
				height: 100%;
				.bdrd(@height / 2);
				background: @bg_color;
				.transform-origin(70% center);
				.transition-transform(.3s cubic-bezier(0, .5, .5, 1));
			}
			&:after {
				content: '';
				display: block;
				width: @inner_height;
				height: @inner_height;
				.bdrd(100%);
				background: white;
				.box-shadow(0 2px 7px rgba(0, 0, 0, 0.35), 0 1px 1px rgba(0, 0, 0, 0.15););
				.transition-transform(.3s cubic-bezier(0, 1.1, 1, 1.1));
				.translate(0, 0);
			}
		}

		&:checked + @{selector} {
			background: @checked_color;
			border-color: @checked_color;
			&:before {
				.scale(0);
			}
			&:after {
				.translate(@inner_width - @inner_height, 0);
			}
		}
	}
}
.switch(@width: 50px, @height: 30px, @elem: '*') when (isnumber(@width)) {
	.switch-init(@switch_default_color, @width, @height, @elem);
}
.switch(@color, @width: 50px, @height: 30px, @elem: '*') when (iscolor(extract(@color, 1))) {
	.switch-init(@color, @width, @height, @elem);
}
